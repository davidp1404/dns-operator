apiVersion: v1
data:
  dns-operator.py: "import kopf, logging, random\nimport asyncio\n# import yaml\n#
    import json\n# import os, time\n# import re\n# from jinja2 import Environment,
    FileSystemLoader\nfrom kubernetes import client, config\nfrom kubernetes.client.rest
    import ApiException\n# import datetime\n\n\nimport filednsoperator as filednsoperator\n\ndef
    get_provider(namespace,dnsname):\n  v1 = client.CustomObjectsApi()\n  try:\n    instance
    = v1.get_namespaced_custom_object(group=\"davidp1404.github.com\", version=\"v1\",
    plural=\"dnsservers\",namespace=namespace,name=dnsname)\n    return instance['spec']['provider']\n
    \ except ApiException as e:\n    return \"\"\n\n#https://kopf.readthedocs.io/en/stable/peering/?highlight=wait#multi-pod-operators\n@kopf.on.startup()\ndef
    configure(settings: kopf.OperatorSettings, **_):\n    settings.peering.priority
    = random.randint(0, 32767) \n    settings.peering.stealth = True\n    settings.peering.standalone
    = False\n    settings.posting.level = logging.INFO\n\n@kopf.on.create('dnsservers')\nasync
    def create_dnsservers(spec, name, namespace, logger, **kwargs):\n  if spec.get('provider')
    == \"corednsFiles\":\n    return(await filednsoperator.create_dnsservers(spec,
    name, namespace, logger, **kwargs))\n\n@kopf.on.create('dnsrecords')\nasync def
    create_dnsrecords(spec, name, namespace, logger,bypass_rollout=False, **kwargs):\n
    \ provider = get_provider(namespace,spec.get('dnsServerRef'))\n  if provider ==
    \"corednsFiles\":\n    return(await filednsoperator.create_dnsrecords(spec, name,
    namespace, logger,bypass_rollout=False, **kwargs))\n\n@kopf.on.update('dnsrecords')\nasync
    def update_dnsrecords(spec, old, new, name, namespace, logger, diff, **_):\n  provider
    = get_provider(namespace,spec.get('dnsServerRef'))\n  if provider == \"corednsFiles\":\n
    \   return(await filednsoperator.update_dnsrecords(spec, old, new, name, namespace,
    logger, diff, **_))\n\n@kopf.on.delete('dnsrecords')\nasync def delete_dnsrecords(spec,
    name, namespace, logger,bypass_rollout=False, **kwargs):\n  provider = get_provider(namespace,spec.get('dnsServerRef'))\n
    \ if provider == \"corednsFiles\":\n    return(await filednsoperator.delete_dnsrecords(spec,
    name, namespace, logger,bypass_rollout=False, **kwargs))\n\n#config.load_kube_config()
    \ # for local environment\n#config.load_incluster_config()  "
  filednsoperator.py: "\nfrom jinja2 import Environment, FileSystemLoader\nfrom kubernetes
    import client, config\nfrom kubernetes.client.rest import ApiException\nimport
    datetime\nimport kopf\nimport yaml\nimport json\nimport os, time\nimport re\nimport
    random\nimport logging\nimport asyncio\n\ndef genDNSDeployment(name,namespace,zonelist,replicas):\n
    \ file_path = os.path.dirname(os.path.realpath(__file__)) + \"/templates\"\n  environment
    = Environment(loader=FileSystemLoader(file_path))\n  template = environment.get_template(\"deployment.j2\")\n
    \ body = template.render(name=name.replace('.','-'),namespace=namespace,zonelist=zonelist,replicas=replicas)\n
    \ return(yaml.safe_load(body))    \n\ndef genDNSConfigmap(name,namespace,zonelist,nslist):\n
    \ file_path = os.path.dirname(os.path.realpath(__file__)) + \"/templates\"\n  environment
    = Environment(loader=FileSystemLoader(file_path))\n  template = environment.get_template(\"configmap.j2\")\n
    \ body = template.render(name=name.replace('.','-'),namespace=namespace,zonelist=zonelist,nslist=nslist)\n
    \ # remove empty lines\n  body=re.sub(r'\\n\\s*\\n','\\n',body,re.MULTILINE)\n
    \ return(yaml.safe_load(body))\n\ndef genDNSTCPService(name,namespace,lbtype):\n
    \ file_path = os.path.dirname(os.path.realpath(__file__)) + \"/templates\"\n  environment
    = Environment(loader=FileSystemLoader(file_path))\n  template = environment.get_template(\"service-tcp.j2\")\n
    \ body = template.render(name=name.replace('.','-'),namespace=namespace,lbtype=lbtype)\n
    \ return(yaml.safe_load(body))\n\ndef genDNSUDPService(name,namespace,lbtype):\n
    \ file_path = os.path.dirname(os.path.realpath(__file__)) + \"/templates\"\n  environment
    = Environment(loader=FileSystemLoader(file_path))\n  template = environment.get_template(\"service-udp.j2\")\n
    \ body = template.render(name=name.replace('.','-'),namespace=namespace,lbtype=lbtype)\n
    \ return(yaml.safe_load(body))\n\nasync def rolloutDeployment (deployment,namespace,timeout,logger):\n
    \ now = datetime.datetime.utcnow()\n  now = str(now.isoformat(\"T\") + \"Z\")\n
    \ body = {\n      'spec': {\n          'template':{\n              'metadata':
    {\n                  'annotations': {\n                      'kubectl.kubernetes.io/restartedAt':
    now\n                  }\n              }\n          }\n      }\n  }\n  try:\n
    \   v1_apps = client.AppsV1Api()\n    start = time.time()\n    v1_apps.patch_namespaced_deployment(deployment,
    namespace, body, pretty='true')\n    while time.time() - start < timeout:\n      #time.sleep(2)\n
    \     await asyncio.sleep(2.0)\n      response = v1_apps.read_namespaced_deployment_status(deployment,namespace)\n
    \     s = response.status\n      if (s.updated_replicas == response.spec.replicas
    and\n              s.replicas == response.spec.replicas and\n              s.available_replicas
    == response.spec.replicas and\n              s.observed_generation >= response.metadata.generation):\n
    \         logger.info('Rollout deployment finish without errors')\n          return
    True\n      else:\n          pass\n          #logger.info(f'[updated_replicas:{s.updated_replicas},replicas:{s.replicas},
    available_replicas:{s.available_replicas},observed_generation:{s.observed_generation}]
    waiting...')\n    raise RuntimeError(f'Waiting timeout for deployment {deployment}')\n
    \ except ApiException as e:\n      e=str(e).replace('\\n','\\\\n')\n      error_msg=f'{{\"error\":
    {e}}}'\n      logger.error(\"Exception when calling rolloutDeployment: %s\\n\"
    % error_msg)\n\nasync def create_dnsservers(spec, name, namespace, logger, **kwargs):\n
    \ deployment = genDNSDeployment(name,namespace,spec.get('zones'),spec.get('replicas'))\n
    \ configmap = genDNSConfigmap(name,namespace,spec.get('zones'),spec.get('nsRecords'))\n
    \ service_tcp = genDNSTCPService(name,namespace,'LoadBalancer')\n  service_udp
    = genDNSUDPService(name,namespace,'LoadBalancer')\n  try:\n    v1_core = client.CoreV1Api()\n
    \   v1_apps = client.AppsV1Api()\n    # Make unnecesary to manage deletion\n    kopf.adopt(deployment)\n
    \   kopf.adopt(configmap)\n    kopf.adopt(service_tcp)\n    kopf.adopt(service_udp)\n
    \   v1_apps.create_namespaced_deployment(namespace,deployment,pretty='true')\n
    \   v1_core.create_namespaced_config_map(namespace,configmap,pretty='true')\n
    \   v1_core.create_namespaced_service(namespace,service_tcp,pretty='true')\n    v1_core.create_namespaced_service(namespace,service_udp,pretty='true')\n
    \   await asyncio.sleep(2.0)\n  except ApiException as e:\n      e=str(e).replace('\\n','\\\\n')\n
    \     error_msg=f'{{\"error\": {e}}}'\n      logger.error(\"Exception when calling
    create_dnsServer: %s\\n\" % error_msg)\n  now = datetime.datetime.utcnow()\n  return
    json.dumps({'last_event': now},default=str)\n\nasync def create_dnsrecords(spec,
    name, namespace, logger,bypass_rollout=False, **kwargs):\n  try:\n    # Get some
    contextual data\n    zone=spec.get('zone')\n    dnsServerRef=spec.get('dnsServerRef')\n
    \   recordType=spec.get('recordType')\n    recordKey=spec.get('recordKey')\n    recordValue=spec.get('recordValue')\n
    \   configMapName=f'dns-operator-{dnsServerRef}'.replace('.','-')\n    zoneName=f'db.{zone}'\n
    \   v1_core = client.CoreV1Api()\n    currentConfigMap = v1_core.read_namespaced_config_map(namespace=namespace,name=configMapName)\n
    \   currentZoneValue = currentConfigMap.data[zoneName]\n    # Verify record doesn't
    exit\n    # if not re.search(f'{recordKey} (.*) IN {recordType} (.*)',data):\n
    \   if currentZoneValue.find(f'{recordKey} IN {recordType}') > 0:\n      logger.warning(f'Record
    \"{recordKey} IN {recordType}\" already exists, removing it before procesing')\n
    \     currentZoneValue=re.sub(f'{recordKey} IN {recordType} .*(?:\\n|$)','',currentZoneValue)\n
    \   # Add it\n    newZoneValue=currentZoneValue\n    for item in recordValue:\n
    \     newZoneValue+=f'{recordKey} IN {recordType} {item}\\n' \n      logger.info(f'Adding
    Record \"{recordKey} IN {recordType} {item}')\n    # remove empty lines\n    #newZoneValue=re.sub(r'\\n\\s*\\n','\\n',newZoneValue,re.MULTILINE)\n
    \   newZoneValue = newZoneValue.replace('\\n','\\\\n')\n    patch_body=yaml.safe_load(f'[{{
    \"op\": \"replace\", \"path\": \"/data/db.{zone}\", \"value\": \"{newZoneValue}\"}}]')\n
    \   v1_core.patch_namespaced_config_map(configMapName,namespace,patch_body,pretty='true')\n
    \   if not bypass_rollout:\n        await rolloutDeployment (f'dns-operator-{dnsServerRef}'.replace('.','-'),namespace,60,logger)\n
    \   now = datetime.datetime.utcnow()\n    return json.dumps({'last_event': now},default=str)\n
    \ except ApiException as e:\n    e=str(e).replace('\\n','\\\\n')\n    error_msg=f'{{\"error\":
    {e}}}'\n    logger.error(\"Exception when calling create_dnsrecords: %s\\n\" %
    error_msg)\n\nasync def update_dnsrecords(spec, old, new, name, namespace, logger,
    diff, **_):\n  # Delete and create it\n  await delete_dnsrecords(old.get('spec'),name,namespace,logger,bypass_rollout=True)\n
    \ await create_dnsrecords(new.get('spec'),name,namespace,logger)\n  now = datetime.datetime.utcnow()\n
    \ return json.dumps({'last_event': now},default=str)\n\nasync def delete_dnsrecords(spec,
    name, namespace, logger,bypass_rollout=False, **kwargs):\n  try:\n    # Get some
    contextual data\n    zone=spec.get('zone')\n    dnsServerRef=spec.get('dnsServerRef')\n
    \   recordType=spec.get('recordType')\n    recordKey=spec.get('recordKey')\n    recordValue=spec.get('recordValue')\n
    \   configMapName=f'dns-operator-{dnsServerRef}'.replace('.','-')\n    zoneName=f'db.{zone}'\n
    \   v1_core = client.CoreV1Api()\n    currentConfigMap = v1_core.read_namespaced_config_map(namespace=namespace,name=configMapName)\n
    \   currentZoneValue = currentConfigMap.data[zoneName]\n    # Verify record exit\n
    \   if currentZoneValue.find(f'{recordKey} IN {recordType}'):\n      logger.info(f'Deleting
    record \"{recordKey} IN {recordType}\"')\n      newZoneValue=re.sub(f'{recordKey}
    IN {recordType} .*(?:\\n|$)','',currentZoneValue)\n      newZoneValue = newZoneValue.replace('\\n','\\\\n')\n
    \     patch_body=yaml.safe_load(f'[{{ \"op\": \"replace\", \"path\": \"/data/db.{zone}\",
    \"value\": \"{newZoneValue}\"}}]')\n      v1_core.patch_namespaced_config_map(configMapName,namespace,patch_body,pretty='true')\n
    \     if not bypass_rollout:\n        await rolloutDeployment (f'dns-operator-{dnsServerRef}'.replace('.','-'),namespace,60,logger)\n
    \   else:\n      logger.warning(f'Record \"{recordKey} IN {recordType}\" does
    not exists, ignoring delete')\n    now = datetime.datetime.utcnow()\n    return
    json.dumps({'last_event': now},default=str)\n  except ApiException as e:\n    e=str(e).replace('\\n','\\\\n')\n
    \   error_msg=f'{{\"error\": {e}}}'\n    logger.error(\"Exception when calling
    replaceConfigMap: %s\\n\" % error_msg)\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: dns-operator-app
